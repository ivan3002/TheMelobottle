<html>
<body>
<pre>
<h1>µVision Build Log</h1>
<h2>Tool Versions:</h2>
IDE-Version: µVision V5.38.0.0
Copyright (C) 2022 ARM Ltd and ARM Germany GmbH. All rights reserved.
License Information: ivan ivanp, uni of york, LIC=----
 
Tool Versions:
Toolchain:       MDK-Lite  Version: 5.38.0.0
Toolchain Path:  C:\Keil_v5\ARM\ARMCLANG\Bin
C Compiler:      ArmClang.exe V6.19
Assembler:       Armasm.exe V6.19
Linker/Locator:  ArmLink.exe V6.19
Library Manager: ArmAr.exe V6.19
Hex Converter:   FromElf.exe V6.19
CPU DLL:         SARMCM3.DLL V5.38.0.0
Dialog DLL:      DCM.DLL V1.17.5.0
Target DLL:      STLink\ST-LINKIII-KEIL_SWO.dll V3.1.0.0
Dialog DLL:      TCM.DLL V1.56.4.0
 
<h2>Project:</h2>
C:\Users\ivanp\Downloads\TheMelobottle\main.uvprojx
Project File Date:  01/23/2024

<h2>Output:</h2>
*** Using Compiler 'V6.19', folder: 'C:\Keil_v5\ARM\ARMCLANG\Bin'
Rebuild target 'Target 1'
src/main.c(1): warning: In file included from...
src/Sensors/ultrasonic.h(6): warning: a function declaration without a prototype is deprecated in all versions of C [-Wstrict-prototypes]
void measureAndControlLEDtest();
                             ^
                              void
src/main.c(2): warning: In file included from...
src/Sensors/accel.h(3): warning: a function declaration without a prototype is deprecated in all versions of C [-Wstrict-prototypes]
void initialiseaccel();
                    ^
                     void
src/Sensors/accel.h(4): warning: a function declaration without a prototype is deprecated in all versions of C [-Wstrict-prototypes]
int16_t getangledata(); 
                    ^
                     void
src/Sensors/accel.h(4): warning: no newline at end of file [-Wnewline-eof]
int16_t getangledata(); 
                        ^
src/main.c(3): warning: In file included from...
src/Initialisation/initialisation_funcs.h(5): warning: a function declaration without a prototype is deprecated in all versions of C [-Wstrict-prototypes]
void PB_I2C_Init();
                ^
                 void
src/main.c(4): warning: In file included from...
src/Initialisation/i2ctests.h(5): warning: a function declaration without a prototype is deprecated in all versions of C [-Wstrict-prototypes]
void PB_I2C_Reset();
                 ^
                  void
src/Initialisation/i2ctests.h(8): warning: a function declaration without a prototype is deprecated in all versions of C [-Wstrict-prototypes]
void greenLED();
             ^
              void
src/Initialisation/i2ctests.h(9): warning: a function declaration without a prototype is deprecated in all versions of C [-Wstrict-prototypes]
void yellowLED();
              ^
               void
src/main.c(7): warning: In file included from...
src/audiocode/sawwave.h(4): warning: a function declaration without a prototype is deprecated in all versions of C [-Wstrict-prototypes]
void audioinit();
              ^
               void
src/main.c(15): warning: a function declaration without a prototype is deprecated in all versions of C [-Wstrict-prototypes]
int main() {
        ^
         void
src/main.c(17): warning: // comments are not allowed in this language [-Wcomment]
        // Initialize your peripherals
        ^
src/main.c(25): warning: implicit declaration of function 'sawwave' [-Wimplicit-function-declaration]
                sawwave();
                ^
12 warnings generated.
compiling main.c...
src/Sensors/accel.c(1): warning: non-portable path to file '"stm32f407xx.h"'; specified path differs in case from file name on disk [-Wnonportable-include-path]
#include "STM32F407xx.h"
         ^~~~~~~~~~~~~~~
         "stm32f407xx.h"
src/Sensors/accel.c(4): warning: // comments are not allowed in this language [-Wcomment]
//1010 1000 binary SUB to write for slave-transmit subaddress updating - 0xA8
^
src/Sensors/accel.c(21): warning: no previous extern declaration for non-static variable 'x' [-Wmissing-variable-declarations]
signed int x=0;
           ^
src/Sensors/accel.c(21): note: declare 'static' if the variable is not intended to be used outside of this translation unit
signed int x=0;
^
src/Sensors/accel.c(22): warning: no previous extern declaration for non-static variable 'y' [-Wmissing-variable-declarations]
signed int y=0;
           ^
src/Sensors/accel.c(22): note: declare 'static' if the variable is not intended to be used outside of this translation unit
signed int y=0;
^
src/Sensors/accel.c(23): warning: no previous extern declaration for non-static variable 'z' [-Wmissing-variable-declarations]
signed int z=0;
           ^
src/Sensors/accel.c(23): note: declare 'static' if the variable is not intended to be used outside of this translation unit
signed int z=0;
^
src/Sensors/accel.c(24): warning: no previous extern declaration for non-static variable 'xl' [-Wmissing-variable-declarations]
int16_t xl=0;
        ^
src/Sensors/accel.c(24): note: declare 'static' if the variable is not intended to be used outside of this translation unit
int16_t xl=0;
^
src/Sensors/accel.c(25): warning: no previous extern declaration for non-static variable 'xh' [-Wmissing-variable-declarations]
int16_t xh=0;
        ^
src/Sensors/accel.c(25): note: declare 'static' if the variable is not intended to be used outside of this translation unit
int16_t xh=0;
^
src/Sensors/accel.c(26): warning: no previous extern declaration for non-static variable 'yl' [-Wmissing-variable-declarations]
int16_t yl=0;
        ^
src/Sensors/accel.c(26): note: declare 'static' if the variable is not intended to be used outside of this translation unit
int16_t yl=0;
^
src/Sensors/accel.c(27): warning: no previous extern declaration for non-static variable 'yh' [-Wmissing-variable-declarations]
int16_t yh=0;
        ^
src/Sensors/accel.c(27): note: declare 'static' if the variable is not intended to be used outside of this translation unit
int16_t yh=0;
^
src/Sensors/accel.c(28): warning: no previous extern declaration for non-static variable 'zl' [-Wmissing-variable-declarations]
int16_t zl=0;
        ^
src/Sensors/accel.c(28): note: declare 'static' if the variable is not intended to be used outside of this translation unit
int16_t zl=0;
^
src/Sensors/accel.c(29): warning: no previous extern declaration for non-static variable 'zh' [-Wmissing-variable-declarations]
int16_t zh=0;
        ^
src/Sensors/accel.c(29): note: declare 'static' if the variable is not intended to be used outside of this translation unit
int16_t zh=0;
^
src/Sensors/accel.c(30): warning: no previous extern declaration for non-static variable 'pitch' [-Wmissing-variable-declarations]
int16_t pitch=0;
        ^
src/Sensors/accel.c(30): note: declare 'static' if the variable is not intended to be used outside of this translation unit
int16_t pitch=0;
^
src/Sensors/accel.c(31): warning: no previous extern declaration for non-static variable 'roll' [-Wmissing-variable-declarations]
int16_t roll=0;
        ^
src/Sensors/accel.c(31): note: declare 'static' if the variable is not intended to be used outside of this translation unit
int16_t roll=0;
^
src/Sensors/accel.c(33): warning: a function declaration without a prototype is deprecated in all versions of C [-Wstrict-prototypes]
void initialiseaccel(){
                    ^
                     void
src/Sensors/accel.c(39): warning: implicit declaration of function 'PB_I2C_Write' [-Wimplicit-function-declaration]
        PB_I2C_Write (0x3A,0x21 ,0x00);
        ^
src/Sensors/accel.c(33): warning: no previous prototype for function 'initialiseaccel' [-Wmissing-prototypes]
void initialiseaccel(){
     ^
src/Sensors/accel.c(33): note: declare 'static' if the function is not intended to be used outside of this translation unit
void initialiseaccel(){
^
static 
src/Sensors/accel.c(48): warning: a function declaration without a prototype is deprecated in all versions of C [-Wstrict-prototypes]
int16_t getangledata(){
                    ^
                     void
src/Sensors/accel.c(51): warning: implicit declaration of function 'PB_I2C_Read_Single' [-Wimplicit-function-declaration]
        xl=PB_I2C_Read_Single(0x3A,0x28); 
           ^
src/Sensors/accel.c(51): warning: implicit conversion loses integer precision: 'int' to 'int16_t' (aka 'short') [-Wimplicit-int-conversion]
        xl=PB_I2C_Read_Single(0x3A,0x28); 
          ~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/Sensors/accel.c(52): warning: implicit conversion loses integer precision: 'int' to 'int16_t' (aka 'short') [-Wimplicit-int-conversion]
        xh=PB_I2C_Read_Single(0x3A,0x29);
          ~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/Sensors/accel.c(53): warning: implicit conversion loses integer precision: 'int' to 'int16_t' (aka 'short') [-Wimplicit-int-conversion]
        yl=PB_I2C_Read_Single(0x3A,0x2A);
          ~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/Sensors/accel.c(54): warning: implicit conversion loses integer precision: 'int' to 'int16_t' (aka 'short') [-Wimplicit-int-conversion]
        yh=PB_I2C_Read_Single(0x3A,0x2B);
          ~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/Sensors/accel.c(55): warning: implicit conversion loses integer precision: 'int' to 'int16_t' (aka 'short') [-Wimplicit-int-conversion]
        zl=PB_I2C_Read_Single(0x3A,0x2C);
          ~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/Sensors/accel.c(56): warning: implicit conversion loses integer precision: 'int' to 'int16_t' (aka 'short') [-Wimplicit-int-conversion]
        zh=PB_I2C_Read_Single(0x3A,0x2D);
          ~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/Sensors/accel.c(66): warning: implicitly declaring library function 'atan2' with type 'double (double, double)' [-Wimplicit-function-declaration]
        pitch = 180 * atan2(x, sqrt(y*y + z*z))/3.142; //logo vertical
                      ^
src/Sensors/accel.c(66): note: include the header <math.h> or explicitly provide a declaration for 'atan2'
src/Sensors/accel.c(66): warning: implicitly declaring library function 'sqrt' with type 'double (double)' [-Wimplicit-function-declaration]
        pitch = 180 * atan2(x, sqrt(y*y + z*z))/3.142; //logo vertical
                               ^
src/Sensors/accel.c(66): note: include the header <math.h> or explicitly provide a declaration for 'sqrt'
src/Sensors/accel.c(66): warning: implicit conversion turns floating-point number into integer: 'double' to 'int16_t' (aka 'short') [-Wfloat-conversion]
        pitch = 180 * atan2(x, sqrt(y*y + z*z))/3.142; //logo vertical
              ~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~
src/Sensors/accel.c(67): warning: implicit conversion turns floating-point number into integer: 'double' to 'int16_t' (aka 'short') [-Wfloat-conversion]
        roll = 180 * atan2(y, sqrt(x*x + z*z))/3.142; //logo horizontal
             ~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~
src/Sensors/accel.c(48): warning: no previous prototype for function 'getangledata' [-Wmissing-prototypes]
int16_t getangledata(){
        ^
src/Sensors/accel.c(48): note: declare 'static' if the function is not intended to be used outside of this translation unit
int16_t getangledata(){
^
static 
29 warnings generated.
compiling accel.c...
src/Initialisation/i2ctests.c(1): warning: non-portable path to file '"stm32f407xx.h"'; specified path differs in case from file name on disk [-Wnonportable-include-path]
#include "STM32F407xx.h"
         ^~~~~~~~~~~~~~~
         "stm32f407xx.h"
src/Initialisation/i2ctests.c(3): warning: // comments are not allowed in this language [-Wcomment]
//This code is based on the setup for the "Procboard." The accelerometer used is the same as our application here
^
src/Initialisation/i2ctests.c(21): warning: implicit conversion changes signedness: 'volatile uint32_t' (aka 'volatile unsigned int') to 'int32_t' (aka 'int') [-Wsign-conversion]
        temp = I2C3->SR1;
             ~ ~~~~~~^~~
src/Initialisation/i2ctests.c(27): warning: implicit conversion changes signedness: 'volatile uint32_t' (aka 'volatile unsigned int') to 'int32_t' (aka 'int') [-Wsign-conversion]
        temp = I2C3->SR1;
             ~ ~~~~~~^~~
src/Initialisation/i2ctests.c(28): warning: implicit conversion changes signedness: 'volatile uint32_t' (aka 'volatile unsigned int') to 'int32_t' (aka 'int') [-Wsign-conversion]
        temp = I2C3->SR2;
             ~ ~~~~~~^~~
src/Initialisation/i2ctests.c(13): warning: variable 'temp' set but not used [-Wunused-but-set-variable]
        int32_t volatile temp = 0;  // Used for dummy reads to clear flags
                         ^
src/Initialisation/i2ctests.c(8): warning: no previous prototype for function 'PB_I2C_Write' [-Wmissing-prototypes]
int32_t PB_I2C_Write (char address, char reg, char data) {
        ^
src/Initialisation/i2ctests.c(8): note: declare 'static' if the function is not intended to be used outside of this translation unit
int32_t PB_I2C_Write (char address, char reg, char data) {
^
static 
src/Initialisation/i2ctests.c(49): warning: a function declaration without a prototype is deprecated in all versions of C [-Wstrict-prototypes]
void PB_I2C_Reset() {
                 ^
                  void
src/Initialisation/i2ctests.c(51): warning: implicit declaration of function 'MicroDelay' [-Wimplicit-function-declaration]
        MicroDelay(1000);
        ^
src/Initialisation/i2ctests.c(52): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
        I2C3->CR1               &= ~(1<<15);
                                ~~ ^~~~~~~~
src/Initialisation/i2ctests.c(49): warning: no previous prototype for function 'PB_I2C_Reset' [-Wmissing-prototypes]
void PB_I2C_Reset() {
     ^
src/Initialisation/i2ctests.c(49): note: declare 'static' if the function is not intended to be used outside of this translation unit
void PB_I2C_Reset() {
^
static 
src/Initialisation/i2ctests.c(70): warning: implicit conversion changes signedness: 'volatile uint32_t' (aka 'volatile unsigned int') to 'int32_t' (aka 'int') [-Wsign-conversion]
        temp = I2C3->SR1;
             ~ ~~~~~~^~~
src/Initialisation/i2ctests.c(78): warning: implicit conversion changes signedness: 'volatile uint32_t' (aka 'volatile unsigned int') to 'int32_t' (aka 'int') [-Wsign-conversion]
        temp = I2C3->SR1;
             ~ ~~~~~~^~~
src/Initialisation/i2ctests.c(79): warning: implicit conversion changes signedness: 'volatile uint32_t' (aka 'volatile unsigned int') to 'int32_t' (aka 'int') [-Wsign-conversion]
        temp = I2C3->SR2;
             ~ ~~~~~~^~~
src/Initialisation/i2ctests.c(101): warning: implicit conversion changes signedness: 'volatile uint32_t' (aka 'volatile unsigned int') to 'int32_t' (aka 'int') [-Wsign-conversion]
        temp = I2C3->SR1;
             ~ ~~~~~~^~~
src/Initialisation/i2ctests.c(61): warning: variable 'temp' set but not used [-Wunused-but-set-variable]
        int32_t volatile temp = 0;  // Used for dummy reads to clear flags
                         ^
src/Initialisation/i2ctests.c(56): warning: no previous prototype for function 'PB_I2C_Start_Read' [-Wmissing-prototypes]
int32_t PB_I2C_Start_Read (char address, char reg) {
        ^
src/Initialisation/i2ctests.c(56): note: declare 'static' if the function is not intended to be used outside of this translation unit
int32_t PB_I2C_Start_Read (char address, char reg) {
^
static 
src/Initialisation/i2ctests.c(124): warning: implicit conversion changes signedness: 'volatile uint32_t' (aka 'volatile unsigned int') to 'int32_t' (aka 'int') [-Wsign-conversion]
        temp = I2C3->SR1;  // Clear ADDR flag
             ~ ~~~~~~^~~
src/Initialisation/i2ctests.c(125): warning: implicit conversion changes signedness: 'volatile uint32_t' (aka 'volatile unsigned int') to 'int32_t' (aka 'int') [-Wsign-conversion]
        temp = I2C3->SR2;
             ~ ~~~~~~^~~
src/Initialisation/i2ctests.c(130): warning: implicit conversion changes signedness: 'volatile uint32_t' (aka 'volatile unsigned int') to 'int32_t' (aka 'int') [-Wsign-conversion]
        temp = I2C3->DR;
             ~ ~~~~~~^~
src/Initialisation/i2ctests.c(110): warning: no previous prototype for function 'PB_I2C_Read_Single' [-Wmissing-prototypes]
int32_t PB_I2C_Read_Single (char address, char reg) {
        ^
src/Initialisation/i2ctests.c(110): note: declare 'static' if the function is not intended to be used outside of this translation unit
int32_t PB_I2C_Read_Single (char address, char reg) {
^
static 
src/Initialisation/i2ctests.c(141): warning: a function declaration without a prototype is deprecated in all versions of C [-Wstrict-prototypes]
void greenLED(){
             ^
              void
src/Initialisation/i2ctests.c(142): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
        GPIOB->ODR &= ~(1 << 5);
                   ~~ ^~~~~~~~~
src/Initialisation/i2ctests.c(144): warning: variable declaration in for loop is a C99-specific feature [-Wc99-extensions]
        for (int i = 0; i < 100000; ++i) {
             ^
src/Initialisation/i2ctests.c(144): warning: GCC does not allow variable declarations in for loop initializers before C99 [-Wgcc-compat]
src/Initialisation/i2ctests.c(147): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
        GPIOB->ODR &= ~(1 << 4);
                   ~~ ^~~~~~~~~
src/Initialisation/i2ctests.c(141): warning: no previous prototype for function 'greenLED' [-Wmissing-prototypes]
void greenLED(){
     ^
src/Initialisation/i2ctests.c(141): note: declare 'static' if the function is not intended to be used outside of this translation unit
void greenLED(){
^
static 
src/Initialisation/i2ctests.c(149): warning: a function declaration without a prototype is deprecated in all versions of C [-Wstrict-prototypes]
void yellowLED(){
              ^
               void
src/Initialisation/i2ctests.c(150): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
        GPIOB->ODR &= ~(1 << 4);
                   ~~ ^~~~~~~~~
src/Initialisation/i2ctests.c(152): warning: variable declaration in for loop is a C99-specific feature [-Wc99-extensions]
        for (int i = 0; i <100000; ++i) {
             ^
src/Initialisation/i2ctests.c(152): warning: GCC does not allow variable declarations in for loop initializers before C99 [-Wgcc-compat]
src/Initialisation/i2ctests.c(155): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
        GPIOB->ODR &= ~(1 << 5);
                   ~~ ^~~~~~~~~
src/Initialisation/i2ctests.c(149): warning: no previous prototype for function 'yellowLED' [-Wmissing-prototypes]
void yellowLED(){
     ^
src/Initialisation/i2ctests.c(149): note: declare 'static' if the function is not intended to be used outside of this translation unit
void yellowLED(){
^
static 
33 warnings generated.
compiling i2ctests.c...
src/Sensors/ultrasonic.c(1): warning: In file included from...
src/Sensors/../Initialisation/initialisation_funcs.h(5): warning: a function declaration without a prototype is deprecated in all versions of C [-Wstrict-prototypes]
void PB_I2C_Init();
                ^
                 void
src/Sensors/ultrasonic.c(2): warning: non-portable path to file '"stm32f407xx.h"'; specified path differs in case from file name on disk [-Wnonportable-include-path]
#include "STM32F407xx.h"
         ^~~~~~~~~~~~~~~
         "stm32f407xx.h"
src/Sensors/ultrasonic.c(6): warning: a function declaration without a prototype is deprecated in all versions of C [-Wstrict-prototypes]
uint32_t getEchoPulseDuration() {
                             ^
                              void
src/Sensors/ultrasonic.c(9): warning: // comments are not allowed in this language [-Wcomment]
    // Trigger the ultrasonic sensor by setting the trigger pin high for a short duration
    ^
src/Sensors/ultrasonic.c(14): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
                GPIOB->ODR &= ~(1 << 1);
                           ~~ ^~~~~~~~~
src/Sensors/ultrasonic.c(6): warning: no previous prototype for function 'getEchoPulseDuration' [-Wmissing-prototypes]
uint32_t getEchoPulseDuration() {
         ^
src/Sensors/ultrasonic.c(6): note: declare 'static' if the function is not intended to be used outside of this translation unit
uint32_t getEchoPulseDuration() {
^
static 
src/Sensors/ultrasonic.c(35): warning: a function declaration without a prototype is deprecated in all versions of C [-Wstrict-prototypes]
uint16_t measureDistance() {
                        ^
                         void
src/Sensors/ultrasonic.c(35): warning: no previous prototype for function 'measureDistance' [-Wmissing-prototypes]
uint16_t measureDistance() {
         ^
src/Sensors/ultrasonic.c(35): note: declare 'static' if the function is not intended to be used outside of this translation unit
uint16_t measureDistance() {
^
static 
src/Sensors/ultrasonic.c(48): warning: a function declaration without a prototype is deprecated in all versions of C [-Wstrict-prototypes]
void measureAndControlLEDtest() {
                             ^
                              void
src/Sensors/ultrasonic.c(62): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
        GPIOB->ODR &= ~(1 << 3); // Turn off LED
                   ~~ ^~~~~~~~~
src/Sensors/ultrasonic.c(65): warning: no newline at end of file [-Wnewline-eof]
}
 ^
src/Sensors/ultrasonic.c(48): warning: no previous prototype for function 'measureAndControlLEDtest' [-Wmissing-prototypes]
void measureAndControlLEDtest() {
     ^
src/Sensors/ultrasonic.c(48): note: declare 'static' if the function is not intended to be used outside of this translation unit
void measureAndControlLEDtest() {
^
static 
12 warnings generated.
compiling ultrasonic.c...
src/audiodrivers/cs43l22.c(37): warning: In file included from...
src/audiodrivers/cs43l22.h(41): warning: // comments are not allowed in this language [-Wcomment]
// The next line is a modification to the original source code to remove 
^
src/audiodrivers/cs43l22.c(37): warning: In file included from...
src/audiodrivers/cs43l22.h(43): warning: In file included from...
src/audiodrivers/./audio_replacement.h(1): warning: // comments are not allowed in this language [-Wcomment]
// This file is required to replace some of the constants and structures in the 
^
src/audiodrivers/cs43l22.c(107): warning: no previous extern declaration for non-static variable 'OutputDev' [-Wmissing-variable-declarations]
volatile uint8_t OutputDev = 0;
                 ^
src/audiodrivers/cs43l22.c(107): note: declare 'static' if the variable is not intended to be used outside of this translation unit
volatile uint8_t OutputDev = 0;
         ^
src/audiodrivers/cs43l22.c(141): warning: implicit conversion loses integer precision: 'uint16_t' (aka 'unsigned short') to 'uint8_t' (aka 'unsigned char') [-Wimplicit-int-conversion]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
             ~~~~~~~~~~~~~~ ^~~~~~~~~~
src/audiodrivers/cs43l22.c(167): warning: implicit conversion loses integer precision: 'uint16_t' (aka 'unsigned short') to 'uint8_t' (aka 'unsigned char') [-Wimplicit-int-conversion]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
             ~~~~~~~~~~~~~~ ^~~~~~~~~~
src/audiodrivers/cs43l22.c(170): warning: implicit conversion loses integer precision: 'uint16_t' (aka 'unsigned short') to 'uint8_t' (aka 'unsigned char') [-Wimplicit-int-conversion]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
             ~~~~~~~~~~~~~~ ^~~~~~~~~~
src/audiodrivers/cs43l22.c(173): warning: implicit conversion loses integer precision: 'uint16_t' (aka 'unsigned short') to 'uint8_t' (aka 'unsigned char') [-Wimplicit-int-conversion]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
             ~~~~~~~~~~~~~~ ^~~~~~~~~~
src/audiodrivers/cs43l22.c(182): warning: implicit conversion loses integer precision: 'uint16_t' (aka 'unsigned short') to 'uint8_t' (aka 'unsigned char') [-Wimplicit-int-conversion]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
               ~~~~~~~~~~~~~~ ^~~~~~~~~~
src/audiodrivers/cs43l22.c(185): warning: implicit conversion loses integer precision: 'uint16_t' (aka 'unsigned short') to 'uint8_t' (aka 'unsigned char') [-Wimplicit-int-conversion]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
               ~~~~~~~~~~~~~~ ^~~~~~~~~~
src/audiodrivers/cs43l22.c(186): warning: implicit conversion loses integer precision: 'uint16_t' (aka 'unsigned short') to 'uint8_t' (aka 'unsigned char') [-Wimplicit-int-conversion]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
               ~~~~~~~~~~~~~~ ^~~~~~~~~~
src/audiodrivers/cs43l22.c(197): warning: implicit conversion loses integer precision: 'uint16_t' (aka 'unsigned short') to 'uint8_t' (aka 'unsigned char') [-Wimplicit-int-conversion]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
             ~~~~~~~~~~~~~~ ^~~~~~~~~~
src/audiodrivers/cs43l22.c(199): warning: implicit conversion loses integer precision: 'uint16_t' (aka 'unsigned short') to 'uint8_t' (aka 'unsigned char') [-Wimplicit-int-conversion]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
             ~~~~~~~~~~~~~~ ^~~~~~~~~~
src/audiodrivers/cs43l22.c(201): warning: implicit conversion loses integer precision: 'uint16_t' (aka 'unsigned short') to 'uint8_t' (aka 'unsigned char') [-Wimplicit-int-conversion]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
             ~~~~~~~~~~~~~~ ^~~~~~~~~~
src/audiodrivers/cs43l22.c(203): warning: implicit conversion loses integer precision: 'uint16_t' (aka 'unsigned short') to 'uint8_t' (aka 'unsigned char') [-Wimplicit-int-conversion]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
             ~~~~~~~~~~~~~~ ^~~~~~~~~~
src/audiodrivers/cs43l22.c(205): warning: implicit conversion loses integer precision: 'uint16_t' (aka 'unsigned short') to 'uint8_t' (aka 'unsigned char') [-Wimplicit-int-conversion]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
             ~~~~~~~~~~~~~~ ^~~~~~~~~~
src/audiodrivers/cs43l22.c(206): warning: implicit conversion loses integer precision: 'uint16_t' (aka 'unsigned short') to 'uint8_t' (aka 'unsigned char') [-Wimplicit-int-conversion]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
             ~~~~~~~~~~~~~~ ^~~~~~~~~~
src/audiodrivers/cs43l22.c(133): warning: unused parameter 'AudioFreq' [-Wunused-parameter]
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
                                                                                           ^
src/audiodrivers/cs43l22.c(234): warning: implicit conversion loses integer precision: 'uint16_t' (aka 'unsigned short') to 'uint8_t' (aka 'unsigned char') [-Wimplicit-int-conversion]
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
          ~~~~~~~~~~~~~ ^~~~~~~~~~
src/audiodrivers/cs43l22.c(253): warning: implicit conversion loses integer precision: 'uint16_t' (aka 'unsigned short') to 'uint8_t' (aka 'unsigned char') [-Wimplicit-int-conversion]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
               ~~~~~~~~~~~~~~ ^~~~~~~~~~
src/audiodrivers/cs43l22.c(259): warning: implicit conversion loses integer precision: 'uint16_t' (aka 'unsigned short') to 'uint8_t' (aka 'unsigned char') [-Wimplicit-int-conversion]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
               ~~~~~~~~~~~~~~ ^~~~~~~~~~
src/audiodrivers/cs43l22.c(246): warning: unused parameter 'pBuffer' [-Wunused-parameter]
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
                                                     ^
src/audiodrivers/cs43l22.c(246): warning: unused parameter 'Size' [-Wunused-parameter]
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
                                                                       ^
src/audiodrivers/cs43l22.c(281): warning: implicit conversion loses integer precision: 'uint16_t' (aka 'unsigned short') to 'uint8_t' (aka 'unsigned char') [-Wimplicit-int-conversion]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
             ~~~~~~~~~~~~~~ ^~~~~~~~~~
src/audiodrivers/cs43l22.c(301): warning: implicit conversion loses integer precision: 'uint16_t' (aka 'unsigned short') to 'uint8_t' (aka 'unsigned char') [-Wimplicit-int-conversion]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
             ~~~~~~~~~~~~~~ ^~~~~~~~~~
src/audiodrivers/cs43l22.c(304): warning: implicit conversion loses integer precision: 'uint16_t' (aka 'unsigned short') to 'uint8_t' (aka 'unsigned char') [-Wimplicit-int-conversion]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
             ~~~~~~~~~~~~~~ ^~~~~~~~~~
src/audiodrivers/cs43l22.c(327): warning: implicit conversion loses integer precision: 'uint16_t' (aka 'unsigned short') to 'uint8_t' (aka 'unsigned char') [-Wimplicit-int-conversion]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
             ~~~~~~~~~~~~~~ ^~~~~~~~~~
src/audiodrivers/cs43l22.c(330): warning: implicit conversion loses integer precision: 'uint16_t' (aka 'unsigned short') to 'uint8_t' (aka 'unsigned char') [-Wimplicit-int-conversion]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
             ~~~~~~~~~~~~~~ ^~~~~~~~~~
src/audiodrivers/cs43l22.c(319): warning: unused parameter 'CodecPdwnMode' [-Wunused-parameter]
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
                                                    ^
src/audiodrivers/cs43l22.c(352): warning: implicit conversion loses integer precision: 'uint16_t' (aka 'unsigned short') to 'uint8_t' (aka 'unsigned char') [-Wimplicit-int-conversion]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
               ~~~~~~~~~~~~~~ ^~~~~~~~~~
src/audiodrivers/cs43l22.c(353): warning: implicit conversion loses integer precision: 'uint16_t' (aka 'unsigned short') to 'uint8_t' (aka 'unsigned char') [-Wimplicit-int-conversion]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
               ~~~~~~~~~~~~~~ ^~~~~~~~~~
src/audiodrivers/cs43l22.c(358): warning: implicit conversion loses integer precision: 'uint16_t' (aka 'unsigned short') to 'uint8_t' (aka 'unsigned char') [-Wimplicit-int-conversion]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
               ~~~~~~~~~~~~~~ ^~~~~~~~~~
src/audiodrivers/cs43l22.c(359): warning: implicit conversion loses integer precision: 'uint16_t' (aka 'unsigned short') to 'uint8_t' (aka 'unsigned char') [-Wimplicit-int-conversion]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
               ~~~~~~~~~~~~~~ ^~~~~~~~~~
src/audiodrivers/cs43l22.c(371): warning: unused parameter 'DeviceAddr' [-Wunused-parameter]
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
                                       ^
src/audiodrivers/cs43l22.c(371): warning: unused parameter 'AudioFreq' [-Wunused-parameter]
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
                                                            ^
src/audiodrivers/cs43l22.c(390): warning: implicit conversion loses integer precision: 'uint16_t' (aka 'unsigned short') to 'uint8_t' (aka 'unsigned char') [-Wimplicit-int-conversion]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
               ~~~~~~~~~~~~~~ ^~~~~~~~~~
src/audiodrivers/cs43l22.c(391): warning: implicit conversion loses integer precision: 'uint16_t' (aka 'unsigned short') to 'uint8_t' (aka 'unsigned char') [-Wimplicit-int-conversion]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
               ~~~~~~~~~~~~~~ ^~~~~~~~~~
src/audiodrivers/cs43l22.c(392): warning: implicit conversion loses integer precision: 'uint16_t' (aka 'unsigned short') to 'uint8_t' (aka 'unsigned char') [-Wimplicit-int-conversion]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
               ~~~~~~~~~~~~~~ ^~~~~~~~~~
src/audiodrivers/cs43l22.c(396): warning: implicit conversion loses integer precision: 'uint16_t' (aka 'unsigned short') to 'uint8_t' (aka 'unsigned char') [-Wimplicit-int-conversion]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
               ~~~~~~~~~~~~~~ ^~~~~~~~~~
src/audiodrivers/cs43l22.c(397): warning: implicit conversion loses integer precision: 'uint16_t' (aka 'unsigned short') to 'uint8_t' (aka 'unsigned char') [-Wimplicit-int-conversion]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
               ~~~~~~~~~~~~~~ ^~~~~~~~~~
src/audiodrivers/cs43l22.c(398): warning: implicit conversion loses integer precision: 'uint16_t' (aka 'unsigned short') to 'uint8_t' (aka 'unsigned char') [-Wimplicit-int-conversion]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
               ~~~~~~~~~~~~~~ ^~~~~~~~~~
src/audiodrivers/cs43l22.c(419): warning: implicit conversion loses integer precision: 'uint16_t' (aka 'unsigned short') to 'uint8_t' (aka 'unsigned char') [-Wimplicit-int-conversion]
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
                 ~~~~~~~~~~~~~~ ^~~~~~~~~~
src/audiodrivers/cs43l22.c(424): warning: implicit conversion loses integer precision: 'uint16_t' (aka 'unsigned short') to 'uint8_t' (aka 'unsigned char') [-Wimplicit-int-conversion]
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
                 ~~~~~~~~~~~~~~ ^~~~~~~~~~
src/audiodrivers/cs43l22.c(429): warning: implicit conversion loses integer precision: 'uint16_t' (aka 'unsigned short') to 'uint8_t' (aka 'unsigned char') [-Wimplicit-int-conversion]
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
                 ~~~~~~~~~~~~~~ ^~~~~~~~~~
src/audiodrivers/cs43l22.c(434): warning: implicit conversion loses integer precision: 'uint16_t' (aka 'unsigned short') to 'uint8_t' (aka 'unsigned char') [-Wimplicit-int-conversion]
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
                 ~~~~~~~~~~~~~~ ^~~~~~~~~~
src/audiodrivers/cs43l22.c(439): warning: implicit conversion loses integer precision: 'uint16_t' (aka 'unsigned short') to 'uint8_t' (aka 'unsigned char') [-Wimplicit-int-conversion]
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
                 ~~~~~~~~~~~~~~ ^~~~~~~~~~
src/audiodrivers/cs43l22.c(451): warning: unused parameter 'DeviceAddr' [-Wunused-parameter]
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
                                ^
src/audiodrivers/cs43l22.c(474): warning: implicit conversion loses integer precision: 'uint32_t' (aka 'unsigned int') to 'uint8_t' (aka 'unsigned char') [-Wimplicit-int-conversion]
  return result;
  ~~~~~~ ^~~~~~
47 warnings generated.
compiling cs43l22.c...
src/audiocode/sawwave.c(1): warning: In file included from...
src/audiocode/../audiodrivers/Audio_Drivers.h(2): warning: // comments are not allowed in this language [-Wcomment]
// My versions of the audio drivers supplied with the STM32F4 discovery board.
^
src/audiocode/sawwave.c(1): warning: In file included from...
src/audiocode/../audiodrivers/Audio_Drivers.h(33): warning: In file included from...
src/audiocode/../audiodrivers/./cs43l22.h(41): warning: // comments are not allowed in this language [-Wcomment]
// The next line is a modification to the original source code to remove 
^
src/audiocode/sawwave.c(1): warning: In file included from...
src/audiocode/../audiodrivers/Audio_Drivers.h(33): warning: In file included from...
src/audiocode/../audiodrivers/./cs43l22.h(43): warning: In file included from...
src/audiocode/../audiodrivers/./audio_replacement.h(1): warning: // comments are not allowed in this language [-Wcomment]
// This file is required to replace some of the constants and structures in the 
^
src/audiocode/sawwave.c(9): warning: // comments are not allowed in this language [-Wcomment]
// Set up the sine look-up table:
^
src/audiocode/sawwave.c(17): warning: implicit conversion loses floating-point precision: 'double' to 'float' [-Wimplicit-float-conversion]
float DELTA_T = 1.0/44100;// used in calculation for first order filter
      ~~~~~~~   ~~~^~~~~~
src/audiocode/sawwave.c(17): warning: no previous extern declaration for non-static variable 'DELTA_T' [-Wmissing-variable-declarations]
float DELTA_T = 1.0/44100;// used in calculation for first order filter
      ^
src/audiocode/sawwave.c(17): note: declare 'static' if the variable is not intended to be used outside of this translation unit
float DELTA_T = 1.0/44100;// used in calculation for first order filter
^
src/audiocode/sawwave.c(18): warning: implicit conversion loses floating-point precision: 'double' to 'float' [-Wimplicit-float-conversion]
float distanceToFreqA = 870.297, distanceToFreqB = 0.0034;// used in calculation for second order filter cutoff
      ~~~~~~~~~~~~~~~   ^~~~~~~
src/audiocode/sawwave.c(18): warning: no previous extern declaration for non-static variable 'distanceToFreqA' [-Wmissing-variable-declarations]
float distanceToFreqA = 870.297, distanceToFreqB = 0.0034;// used in calculation for second order filter cutoff
      ^
src/audiocode/sawwave.c(18): note: declare 'static' if the variable is not intended to be used outside of this translation unit
float distanceToFreqA = 870.297, distanceToFreqB = 0.0034;// used in calculation for second order filter cutoff
^
src/audiocode/sawwave.c(18): warning: implicit conversion loses floating-point precision: 'double' to 'float' [-Wimplicit-float-conversion]
float distanceToFreqA = 870.297, distanceToFreqB = 0.0034;// used in calculation for second order filter cutoff
                                 ~~~~~~~~~~~~~~~   ^~~~~~
src/audiocode/sawwave.c(18): warning: no previous extern declaration for non-static variable 'distanceToFreqB' [-Wmissing-variable-declarations]
float distanceToFreqA = 870.297, distanceToFreqB = 0.0034;// used in calculation for second order filter cutoff
                                 ^
src/audiocode/sawwave.c(18): note: declare 'static' if the variable is not intended to be used outside of this translation unit
float distanceToFreqA = 870.297, distanceToFreqB = 0.0034;// used in calculation for second order filter cutoff
^
src/audiocode/sawwave.c(21): warning: implicit conversion loses floating-point precision: 'double' to 'float' [-Wimplicit-float-conversion]
float PENTATONIC = 160.0/11;
      ~~~~~~~~~~   ~~~~~^~~
src/audiocode/sawwave.c(21): warning: no previous extern declaration for non-static variable 'PENTATONIC' [-Wmissing-variable-declarations]
float PENTATONIC = 160.0/11;
      ^
src/audiocode/sawwave.c(21): note: declare 'static' if the variable is not intended to be used outside of this translation unit
float PENTATONIC = 160.0/11;
^
src/audiocode/sawwave.c(24): warning: no previous extern declaration for non-static variable 'noteStatus' [-Wmissing-variable-declarations]
enum eNoteStatus { ready, going, finish } noteStatus = ready;
                                          ^
src/audiocode/sawwave.c(24): note: declare 'static' if the variable is not intended to be used outside of this translation unit
enum eNoteStatus { ready, going, finish } noteStatus = ready;
^
src/audiocode/sawwave.c(26): warning: no previous extern declaration for non-static variable 'bufferStatus' [-Wmissing-variable-declarations]
                        secondHalfReq, secondHalfDone } bufferStatus = empty; 
                                                        ^
src/audiocode/sawwave.c(25): note: declare 'static' if the variable is not intended to be used outside of this translation unit
enum eBufferStatus { empty, finished, firstHalfReq, firstHalfDone,
^
src/audiocode/sawwave.c(27): warning: no previous extern declaration for non-static variable 'currentState' [-Wmissing-variable-declarations]
enum eMainStatus { normal, changingNoteOrBuffer } currentState = normal;
                                                  ^
src/audiocode/sawwave.c(27): note: declare 'static' if the variable is not intended to be used outside of this translation unit
enum eMainStatus { normal, changingNoteOrBuffer } currentState = normal;
^
src/audiocode/sawwave.c(44): warning: variable declaration in for loop is a C99-specific feature [-Wc99-extensions]
        for (int j = 0; j < SINESIZE; j++) {
             ^
src/audiocode/sawwave.c(44): warning: GCC does not allow variable declarations in for loop initializers before C99 [-Wgcc-compat]
src/audiocode/sawwave.c(47): warning: variable declaration in for loop is a C99-specific feature [-Wc99-extensions]
    for (int harmonic = 1; harmonic <= 20; harmonic++) {
         ^
src/audiocode/sawwave.c(47): warning: GCC does not allow variable declarations in for loop initializers before C99 [-Wgcc-compat]
src/audiocode/sawwave.c(48): warning: implicit conversion from 'int' to 'float' may lose precision [-Wimplicit-int-float-conversion]
        float frequency = desiredFreq * harmonic; // get the harmonic frequency
                                      ~ ^~~~~~~~
src/audiocode/sawwave.c(49): warning: implicit conversion from 'int' to 'float' may lose precision [-Wimplicit-int-float-conversion]
        float amplitude = volume / harmonic; // Adjust the amplitude here
                                 ~ ^~~~~~~~
src/audiocode/sawwave.c(51): warning: implicit conversion increases floating-point precision: 'float' to 'double' [-Wdouble-promotion]
        sawtoothWave += amplitude * sin(j * 2.0 * PI * harmonic / SINESIZE);
                        ^~~~~~~~~ ~
src/audiocode/sawwave.c(51): warning: implicit conversion when assigning computation result loses floating-point precision: 'double' to 'float' [-Wimplicit-float-conversion]
        sawtoothWave += amplitude * sin(j * 2.0 * PI * harmonic / SINESIZE);
                     ~~ ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/audiocode/sawwave.c(48): warning: unused variable 'frequency' [-Wunused-variable]
        float frequency = desiredFreq * harmonic; // get the harmonic frequency
              ^
src/audiocode/sawwave.c(42): warning: no previous prototype for function 'saw' [-Wmissing-prototypes]
void saw(float desiredFreq, float volume){
     ^
src/audiocode/sawwave.c(42): note: declare 'static' if the function is not intended to be used outside of this translation unit
void saw(float desiredFreq, float volume){
^
static 
src/audiocode/sawwave.c(63): warning: implicit conversion loses floating-point precision: 'double' to 'float' [-Wimplicit-float-conversion]
                *b0 = 1.0 / (1.0 + Q * ita + ita * ita);
                    ~ ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/audiocode/sawwave.c(63): warning: implicit conversion increases floating-point precision: 'float' to 'double' [-Wdouble-promotion]
                *b0 = 1.0 / (1.0 + Q * ita + ita * ita);
                                           ~ ~~~~^~~~~
src/audiocode/sawwave.c(63): warning: implicit conversion increases floating-point precision: 'float' to 'double' [-Wdouble-promotion]
                *b0 = 1.0 / (1.0 + Q * ita + ita * ita);
                                 ~ ~~^~~~~
src/audiocode/sawwave.c(66): warning: implicit conversion loses floating-point precision: 'double' to 'float' [-Wimplicit-float-conversion]
                *a1 = 2.0*(ita*ita - 1.0) * (*b0);
                    ~ ~~~~~~~~~~~~~~~~~~~~^~~~~~~
src/audiocode/sawwave.c(66): warning: implicit conversion increases floating-point precision: 'float' to 'double' [-Wdouble-promotion]
                *a1 = 2.0*(ita*ita - 1.0) * (*b0);
                                          ~  ^~~
src/audiocode/sawwave.c(66): warning: implicit conversion increases floating-point precision: 'float' to 'double' [-Wdouble-promotion]
                *a1 = 2.0*(ita*ita - 1.0) * (*b0);
                           ~~~^~~~ ~
src/audiocode/sawwave.c(67): warning: implicit conversion loses floating-point precision: 'double' to 'float' [-Wimplicit-float-conversion]
                *a2 = -(1.0 - Q*ita + ita*ita) * (*b0);
                    ~ ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~
src/audiocode/sawwave.c(67): warning: implicit conversion increases floating-point precision: 'float' to 'double' [-Wdouble-promotion]
                *a2 = -(1.0 - Q*ita + ita*ita) * (*b0);
                                               ~  ^~~
src/audiocode/sawwave.c(67): warning: implicit conversion increases floating-point precision: 'float' to 'double' [-Wdouble-promotion]
                *a2 = -(1.0 - Q*ita + ita*ita) * (*b0);
                                    ~ ~~~^~~~
src/audiocode/sawwave.c(67): warning: implicit conversion increases floating-point precision: 'float' to 'double' [-Wdouble-promotion]
                *a2 = -(1.0 - Q*ita + ita*ita) * (*b0);
                            ~ ~^~~~
src/audiocode/sawwave.c(62): warning: no previous prototype for function 'coefficients' [-Wmissing-prototypes]
float coefficients(float Q, float ita, float* b0, float* b1, float* b2, float* a1, float* a2) {
      ^
src/audiocode/sawwave.c(62): note: declare 'static' if the function is not intended to be used outside of this translation unit
float coefficients(float Q, float ita, float* b0, float* b1, float* b2, float* a1, float* a2) {
^
static 
src/audiocode/sawwave.c(69): warning: non-void function does not return a value [-Wreturn-type]
}
^
src/audiocode/sawwave.c(71): warning: a function declaration without a prototype is deprecated in all versions of C [-Wstrict-prototypes]
void audioinit(){
              ^
               void
src/audiocode/sawwave.c(79): warning: variable declaration in for loop is a C99-specific feature [-Wc99-extensions]
        for(int i=0; i <= PBSIZE; i++) {
            ^
src/audiocode/sawwave.c(79): warning: GCC does not allow variable declarations in for loop initializers before C99 [-Wgcc-compat]
src/audiocode/sawwave.c(71): warning: no previous prototype for function 'audioinit' [-Wmissing-prototypes]
void audioinit(){
     ^
src/audiocode/sawwave.c(71): note: declare 'static' if the function is not intended to be used outside of this translation unit
void audioinit(){
^
static 
src/audiocode/sawwave.c(86): warning: implicit declaration of function 'getangledata' [-Wimplicit-function-declaration]
        int16_t angle = getangledata();
                        ^
src/audiocode/sawwave.c(86): warning: implicit conversion loses integer precision: 'int' to 'int16_t' (aka 'short') [-Wimplicit-int-conversion]
        int16_t angle = getangledata();
                ~~~~~   ^~~~~~~~~~~~~~
src/audiocode/sawwave.c(126): warning: implicit conversion loses floating-point precision: 'double' to 'float' [-Wimplicit-float-conversion]
        float ratio = pow(2, (noteRatio/12));
              ~~~~~   ^~~~~~~~~~~~~~~~~~~~~~
src/audiocode/sawwave.c(126): warning: implicit conversion increases floating-point precision: 'float' to 'double' [-Wdouble-promotion]
        float ratio = pow(2, (noteRatio/12));
                      ~~~     ~~~~~~~~~^~~
src/audiocode/sawwave.c(126): warning: mixing declarations and code is a C99 extension [-Wdeclaration-after-statement]
        float ratio = pow(2, (noteRatio/12));
              ^
src/audiocode/sawwave.c(85): warning: no previous prototype for function 'angleToFreq' [-Wmissing-prototypes]
void angleToFreq(float* f_0, float volume, float* phaseIncrement){
     ^
src/audiocode/sawwave.c(85): note: declare 'static' if the function is not intended to be used outside of this translation unit
void angleToFreq(float* f_0, float volume, float* phaseIncrement){
^
static 
src/audiocode/sawwave.c(142): warning: implicit declaration of function 'measureDistance' [-Wimplicit-function-declaration]
        float distance = measureDistance();
                         ^
src/audiocode/sawwave.c(142): warning: implicit conversion from 'int' to 'float' may lose precision [-Wimplicit-int-float-conversion]
        float distance = measureDistance();
              ~~~~~~~~   ^~~~~~~~~~~~~~~~~
src/audiocode/sawwave.c(144): warning: implicit conversion loses floating-point precision: 'double' to 'float' [-Wimplicit-float-conversion]
        *desiredCutoff = distanceToFreqA * pow(10, (distanceToFreqB * distance));
                       ~ ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/audiocode/sawwave.c(144): warning: implicit conversion increases floating-point precision: 'float' to 'double' [-Wdouble-promotion]
        *desiredCutoff = distanceToFreqA * pow(10, (distanceToFreqB * distance));
                                           ~~~      ~~~~~~~~~~~~~~~~^~~~~~~~~~
src/audiocode/sawwave.c(144): warning: implicit conversion increases floating-point precision: 'float' to 'double' [-Wdouble-promotion]
        *desiredCutoff = distanceToFreqA * pow(10, (distanceToFreqB * distance));
                         ^~~~~~~~~~~~~~~ ~
src/audiocode/sawwave.c(141): warning: no previous prototype for function 'calcCutoff' [-Wmissing-prototypes]
void calcCutoff(float* desiredCutoff) {
     ^
src/audiocode/sawwave.c(141): note: declare 'static' if the function is not intended to be used outside of this translation unit
void calcCutoff(float* desiredCutoff) {
^
static 
src/audiocode/sawwave.c(150): warning: a function declaration without a prototype is deprecated in all versions of C [-Wstrict-prototypes]
void sawwave(){
            ^
             void
src/audiocode/sawwave.c(216): warning: implicit conversion loses floating-point precision: 'double' to 'float' [-Wimplicit-float-conversion]
                float ita = 1.0/ tan(PI*ff);
                      ~~~   ~~~^~~~~~~~~~~~
src/audiocode/sawwave.c(216): warning: implicit conversion increases floating-point precision: 'float' to 'double' [-Wdouble-promotion]
                float ita = 1.0/ tan(PI*ff);
                                       ~^~
src/audiocode/sawwave.c(225): warning: variable declaration in for loop is a C99-specific feature [-Wc99-extensions]
                for (int i = startFill; i < endFill; i += 2) {
                     ^
src/audiocode/sawwave.c(225): warning: GCC does not allow variable declarations in for loop initializers before C99 [-Wgcc-compat]
src/audiocode/sawwave.c(225): warning: implicit conversion changes signedness: 'uint32_t' (aka 'unsigned int') to 'int' [-Wsign-conversion]
                for (int i = startFill; i < endFill; i += 2) {
                         ~   ^~~~~~~~~
src/audiocode/sawwave.c(235): warning: declaration shadows a local variable [-Wshadow]
                        float filteredSample = ( a1 * lastSampleOutput ) + ( a2 * lastLastSampleOutput ) + ( b0 * nextSample )  + ( b1 * lastSampleInput ) + ( b2 * lastLastSampleInput );
                              ^
src/audiocode/sawwave.c(167): note: previous declaration is here
        float lastSampleInput = 0.0, lastLastSampleInput= 0.0, lastSampleOutput = 0.0, lastLastSampleOutput = 0.0, filteredSample = 0.0;
                                                                                                                   ^
src/audiocode/sawwave.c(238): warning: implicit conversion increases floating-point precision: 'float' to 'double' [-Wdouble-promotion]
                        PlayBuff[i] = (int16_t)(0.5*filteredSample); // volume decreased due to additions
                                                   ~^~~~~~~~~~~~~~
src/audiocode/sawwave.c(239): warning: implicit conversion increases floating-point precision: 'float' to 'double' [-Wdouble-promotion]
                        PlayBuff[i + 1] = (int16_t)(0.5*filteredSample);
                                                       ~^~~~~~~~~~~~~~
src/audiocode/sawwave.c(229): warning: mixing declarations and code is a C99 extension [-Wdeclaration-after-statement]
                        int16_t nextSample = SineBuff[(uint16_t)(currentPhase)];
                                ^
src/audiocode/sawwave.c(215): warning: mixing declarations and code is a C99 extension [-Wdeclaration-after-statement]
                float ff = desiredCutoff/AUDIO_FREQUENCY_44K;
                      ^
src/audiocode/sawwave.c(167): warning: mixing declarations and code is a C99 extension [-Wdeclaration-after-statement]
        float lastSampleInput = 0.0, lastLastSampleInput= 0.0, lastSampleOutput = 0.0, lastLastSampleOutput = 0.0, filteredSample = 0.0;
              ^
src/audiocode/sawwave.c(167): warning: unused variable 'filteredSample' [-Wunused-variable]
        float lastSampleInput = 0.0, lastLastSampleInput= 0.0, lastSampleOutput = 0.0, lastLastSampleOutput = 0.0, filteredSample = 0.0;
                                                                                                                   ^
src/audiocode/sawwave.c(150): warning: no previous prototype for function 'sawwave' [-Wmissing-prototypes]
void sawwave(){
     ^
src/audiocode/sawwave.c(150): note: declare 'static' if the function is not intended to be used outside of this translation unit
void sawwave(){
^
static 
src/audiocode/sawwave.c(225): warning: comparison of integers of different signs: 'int' and 'uint32_t' (aka 'unsigned int') [-Wsign-compare]
                for (int i = startFill; i < endFill; i += 2) {
                                        ~ ^ ~~~~~~~
src/audiocode/sawwave.c(150): warning: function 'sawwave' could be declared with attribute 'noreturn' [-Wmissing-noreturn]
void sawwave(){
              ^
src/audiocode/sawwave.c(14): warning: no previous extern declaration for non-static variable 'PlayBuff' [-Wmissing-variable-declarations]
int16_t PlayBuff[PBSIZE]; 
        ^
src/audiocode/sawwave.c(14): note: declare 'static' if the variable is not intended to be used outside of this translation unit
int16_t PlayBuff[PBSIZE]; 
^
src/audiocode/sawwave.c(15): warning: no previous extern declaration for non-static variable 'SineBuff' [-Wmissing-variable-declarations]
int16_t SineBuff[SINESIZE]; 
        ^
src/audiocode/sawwave.c(15): note: declare 'static' if the variable is not intended to be used outside of this translation unit
int16_t SineBuff[SINESIZE]; 
^
71 warnings generated.
compiling sawwave.c...
src/audiodrivers/Audio_Drivers.c(2): warning: // comments are not allowed in this language [-Wcomment]
// My versions of the audio drivers required for the the STM32F4 discovery board.
^
src/audiodrivers/Audio_Drivers.c(5): warning: In file included from...
src/audiodrivers/./Audio_Drivers.h(2): warning: // comments are not allowed in this language [-Wcomment]
// My versions of the audio drivers supplied with the STM32F4 discovery board.
^
src/audiodrivers/Audio_Drivers.c(5): warning: In file included from...
src/audiodrivers/./Audio_Drivers.h(33): warning: In file included from...
src/audiodrivers/./cs43l22.h(41): warning: // comments are not allowed in this language [-Wcomment]
// The next line is a modification to the original source code to remove 
^
src/audiodrivers/Audio_Drivers.c(5): warning: In file included from...
src/audiodrivers/./Audio_Drivers.h(33): warning: In file included from...
src/audiodrivers/./cs43l22.h(43): warning: In file included from...
src/audiodrivers/./audio_replacement.h(1): warning: // comments are not allowed in this language [-Wcomment]
// This file is required to replace some of the constants and structures in the 
^
src/audiodrivers/Audio_Drivers.c(10): warning: no previous extern declaration for non-static variable 'audioI2SStatus' [-Wmissing-variable-declarations]
MY_AUDIO_StatusTypeDef                  audioI2SStatus = MY_AUDIO_RESET;
                                        ^
src/audiodrivers/Audio_Drivers.c(10): note: declare 'static' if the variable is not intended to be used outside of this translation unit
MY_AUDIO_StatusTypeDef                  audioI2SStatus = MY_AUDIO_RESET;
^
src/audiodrivers/Audio_Drivers.c(11): warning: no previous extern declaration for non-static variable 'audioDMAStatus' [-Wmissing-variable-declarations]
MY_AUDIO_StatusTypeDef                  audioDMAStatus = MY_AUDIO_RESET;
                                        ^
src/audiodrivers/Audio_Drivers.c(11): note: declare 'static' if the variable is not intended to be used outside of this translation unit
MY_AUDIO_StatusTypeDef                  audioDMAStatus = MY_AUDIO_RESET;
^
src/audiodrivers/Audio_Drivers.c(12): warning: no previous extern declaration for non-static variable 'audioI2CStatus' [-Wmissing-variable-declarations]
MY_AUDIO_StatusTypeDef                  audioI2CStatus = MY_AUDIO_RESET;        
                                        ^
src/audiodrivers/Audio_Drivers.c(12): note: declare 'static' if the variable is not intended to be used outside of this translation unit
MY_AUDIO_StatusTypeDef                  audioI2CStatus = MY_AUDIO_RESET;        
^
src/audiodrivers/Audio_Drivers.c(13): warning: no previous extern declaration for non-static variable 'audioDACStatus' [-Wmissing-variable-declarations]
MY_AUDIO_StatusTypeDef                  audioDACStatus = MY_AUDIO_RESET;
                                        ^
src/audiodrivers/Audio_Drivers.c(13): note: declare 'static' if the variable is not intended to be used outside of this translation unit
MY_AUDIO_StatusTypeDef                  audioDACStatus = MY_AUDIO_RESET;
^
src/audiodrivers/Audio_Drivers.c(15): warning: no previous extern declaration for non-static variable 'AudioI2C' [-Wmissing-variable-declarations]
I2C_TypeDef *AudioI2C = (I2C_TypeDef *) I2C1_BASE;
             ^
src/audiodrivers/Audio_Drivers.c(15): note: declare 'static' if the variable is not intended to be used outside of this translation unit
I2C_TypeDef *AudioI2C = (I2C_TypeDef *) I2C1_BASE;
^
src/audiodrivers/Audio_Drivers.c(16): warning: no previous extern declaration for non-static variable 'AudioI2S' [-Wmissing-variable-declarations]
SPI_TypeDef *AudioI2S = (SPI_TypeDef *) SPI3_BASE;
             ^
src/audiodrivers/Audio_Drivers.c(16): note: declare 'static' if the variable is not intended to be used outside of this translation unit
SPI_TypeDef *AudioI2S = (SPI_TypeDef *) SPI3_BASE;
^
src/audiodrivers/Audio_Drivers.c(31): warning: implicit conversion changes signedness: 'int' to 'unsigned long' [-Wsign-conversion]
  port->MODER = (port->MODER & bitMask) | (mode << 2*pin);
                                        ~  ~~~~~^~~~~~~~
src/audiodrivers/Audio_Drivers.c(35): warning: implicit conversion changes signedness: 'int32_t' (aka 'int') to 'unsigned int' [-Wsign-conversion]
        if (alternate >= 0 && pin > 7) port->AFR[1] = (port->AFR[1] & ~(0x0F << 4*(pin-8))) | (alternate << 4*(pin-8));
                                                                                            ~  ~~~~~~~~~~^~~~~~~~~~~~
src/audiodrivers/Audio_Drivers.c(35): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
        if (alternate >= 0 && pin > 7) port->AFR[1] = (port->AFR[1] & ~(0x0F << 4*(pin-8))) | (alternate << 4*(pin-8));
                                                                    ~ ^~~~~~~~~~~~~~~~~~~~
src/audiodrivers/Audio_Drivers.c(36): warning: implicit conversion changes signedness: 'int32_t' (aka 'int') to 'unsigned int' [-Wsign-conversion]
        else if (alternate >= 0) port->AFR[0] = (port->AFR[0] & ~(0x0F << 4*pin)) | (alternate << 4*pin);       
                                                                                  ~  ~~~~~~~~~~^~~~~~~~
src/audiodrivers/Audio_Drivers.c(36): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
        else if (alternate >= 0) port->AFR[0] = (port->AFR[0] & ~(0x0F << 4*pin)) | (alternate << 4*pin);       
                                                              ~ ^~~~~~~~~~~~~~~~
src/audiodrivers/Audio_Drivers.c(20): warning: no previous prototype for function 'Configure_GPIO_Output' [-Wmissing-prototypes]
void Configure_GPIO_Output(GPIO_TypeDef *port, uint32_t pin, uint32_t speed, int32_t alternate) {
     ^
src/audiodrivers/Audio_Drivers.c(20): note: declare 'static' if the function is not intended to be used outside of this translation unit
void Configure_GPIO_Output(GPIO_TypeDef *port, uint32_t pin, uint32_t speed, int32_t alternate) {
^
static 
src/audiodrivers/Audio_Drivers.c(44): warning: a function declaration without a prototype is deprecated in all versions of C [-Wstrict-prototypes]
void initAudioTimer() {
                   ^
                    void
src/audiodrivers/Audio_Drivers.c(56): warning: mixing declarations and code is a C99 extension [-Wdeclaration-after-statement]
        uint32_t PPRE2_Factors[8] = {0, 0, 0, 0, 1, 2, 3, 4};
                 ^
src/audiodrivers/Audio_Drivers.c(75): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
        audioTimer->SR &= ~0x07;         // Clear status flags before enabling counter
                       ~~ ^~~~~
src/audiodrivers/Audio_Drivers.c(70): warning: mixing declarations and code is a C99 extension [-Wdeclaration-after-statement]
        uint32_t countToWaitFor = (delayInMilliSeconds < 6500) ? 10 * delayInMilliSeconds : 65000;
                 ^
src/audiodrivers/Audio_Drivers.c(78): warning: a function declaration without a prototype is deprecated in all versions of C [-Wstrict-prototypes]
uint32_t hasAudioTimerFinished() {
                              ^
                               void
src/audiodrivers/Audio_Drivers.c(110): warning: no previous prototype for function 'myConfigureI2SClock' [-Wmissing-prototypes]
MY_AUDIO_StatusTypeDef myConfigureI2SClock(uint32_t newN, uint32_t newR)
                       ^
src/audiodrivers/Audio_Drivers.c(110): note: declare 'static' if the function is not intended to be used outside of this translation unit
MY_AUDIO_StatusTypeDef myConfigureI2SClock(uint32_t newN, uint32_t newR)
^
static 
src/audiodrivers/Audio_Drivers.c(134): warning: a function declaration without a prototype is deprecated in all versions of C [-Wstrict-prototypes]
MY_AUDIO_StatusTypeDef myConfigureTheMainClockPLL()
                                                 ^
                                                  void
src/audiodrivers/Audio_Drivers.c(151): warning: mixing declarations and code is a C99 extension [-Wdeclaration-after-statement]
        uint32_t newPLLConfig = 0;
                 ^
src/audiodrivers/Audio_Drivers.c(134): warning: no previous prototype for function 'myConfigureTheMainClockPLL' [-Wmissing-prototypes]
MY_AUDIO_StatusTypeDef myConfigureTheMainClockPLL()
                       ^
src/audiodrivers/Audio_Drivers.c(134): note: declare 'static' if the function is not intended to be used outside of this translation unit
MY_AUDIO_StatusTypeDef myConfigureTheMainClockPLL()
^
static 
src/audiodrivers/Audio_Drivers.c(168): warning: a function declaration without a prototype is deprecated in all versions of C [-Wstrict-prototypes]
MY_AUDIO_StatusTypeDef myConfigureFlashWaitStatesAndBusClocks()
                                                             ^
                                                              void
src/audiodrivers/Audio_Drivers.c(205): warning: mixing declarations and code is a C99 extension [-Wdeclaration-after-statement]
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U, pllsource = 0U, pllFreq = 0;
           ^
src/audiodrivers/Audio_Drivers.c(168): warning: no previous prototype for function 'myConfigureFlashWaitStatesAndBusClocks' [-Wmissing-prototypes]
MY_AUDIO_StatusTypeDef myConfigureFlashWaitStatesAndBusClocks()
                       ^
src/audiodrivers/Audio_Drivers.c(168): note: declare 'static' if the function is not intended to be used outside of this translation unit
MY_AUDIO_StatusTypeDef myConfigureFlashWaitStatesAndBusClocks()
^
static 
src/audiodrivers/Audio_Drivers.c(257): warning: no previous extern declaration for non-static variable 'I2CMaxTimeOut' [-Wmissing-variable-declarations]
const uint32_t I2CMaxTimeOut = 0x1000;
               ^
src/audiodrivers/Audio_Drivers.c(257): note: declare 'static' if the variable is not intended to be used outside of this translation unit
const uint32_t I2CMaxTimeOut = 0x1000;
      ^
src/audiodrivers/Audio_Drivers.c(258): warning: no previous extern declaration for non-static variable 'I2CDefaultTimeOut' [-Wmissing-variable-declarations]
const uint32_t I2CDefaultTimeOut = 25;
               ^
src/audiodrivers/Audio_Drivers.c(258): note: declare 'static' if the variable is not intended to be used outside of this translation unit
const uint32_t I2CDefaultTimeOut = 25;
      ^
src/audiodrivers/Audio_Drivers.c(260): warning: a function declaration without a prototype is deprecated in all versions of C [-Wstrict-prototypes]
MY_AUDIO_StatusTypeDef configureAudioDACI2CRegisters() {        
                                                    ^
                                                     void
src/audiodrivers/Audio_Drivers.c(260): warning: no previous prototype for function 'configureAudioDACI2CRegisters' [-Wmissing-prototypes]
MY_AUDIO_StatusTypeDef configureAudioDACI2CRegisters() {        
                       ^
src/audiodrivers/Audio_Drivers.c(260): note: declare 'static' if the function is not intended to be used outside of this translation unit
MY_AUDIO_StatusTypeDef configureAudioDACI2CRegisters() {        
^
static 
src/audiodrivers/Audio_Drivers.c(326): warning: no previous prototype for function 'setupResetForAudioDAC' [-Wmissing-prototypes]
void setupResetForAudioDAC(void) {
     ^
src/audiodrivers/Audio_Drivers.c(326): note: declare 'static' if the function is not intended to be used outside of this translation unit
void setupResetForAudioDAC(void) {
^
static 
src/audiodrivers/Audio_Drivers.c(529): warning: implicit conversion loses integer precision: 'volatile uint32_t' (aka 'volatile unsigned int') to 'uint8_t' (aka 'unsigned char') [-Wimplicit-int-conversion]
                        *pData++ = I2Cx->DR;
                                 ~ ~~~~~~^~
src/audiodrivers/Audio_Drivers.c(550): warning: implicit conversion loses integer precision: 'volatile uint32_t' (aka 'volatile unsigned int') to 'uint8_t' (aka 'unsigned char') [-Wimplicit-int-conversion]
      *pData++ = I2Cx->DR;
               ~ ~~~~~~^~
src/audiodrivers/Audio_Drivers.c(551): warning: implicit conversion loses integer precision: 'volatile uint32_t' (aka 'volatile unsigned int') to 'uint8_t' (aka 'unsigned char') [-Wimplicit-int-conversion]
      *pData++ = I2Cx->DR;
               ~ ~~~~~~^~
src/audiodrivers/Audio_Drivers.c(449): warning: mixing declarations and code is a C99 extension [-Wdeclaration-after-statement]
                MY_AUDIO_StatusTypeDef retValue = MY_AUDIO_OK;
                                       ^
src/audiodrivers/Audio_Drivers.c(561): warning: a function declaration without a prototype is deprecated in all versions of C [-Wstrict-prototypes]
static void resetTheI2CDriver()
                             ^
                              void
src/audiodrivers/Audio_Drivers.c(585): warning: mixing declarations and code is a C99 extension [-Wdeclaration-after-statement]
        uint32_t transferSize = Size;
                 ^
src/audiodrivers/Audio_Drivers.c(651): warning: no previous prototype for function 'myI2Cx_WriteData' [-Wmissing-prototypes]
uint32_t myI2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value){
         ^
src/audiodrivers/Audio_Drivers.c(651): note: declare 'static' if the function is not intended to be used outside of this translation unit
uint32_t myI2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value){
^
static 
src/audiodrivers/Audio_Drivers.c(666): warning: no previous prototype for function 'checkAudioDAC_ID' [-Wmissing-prototypes]
uint32_t checkAudioDAC_ID(uint8_t deviceAddress) {
         ^
src/audiodrivers/Audio_Drivers.c(666): note: declare 'static' if the function is not intended to be used outside of this translation unit
uint32_t checkAudioDAC_ID(uint8_t deviceAddress) {
^
static 
src/audiodrivers/Audio_Drivers.c(682): warning: unused parameter 'DeviceAddr' [-Wunused-parameter]
extern uint8_t AUDIO_IO_Read(uint8_t DeviceAddr, uint8_t chipIdAddress) {
                                     ^
src/audiodrivers/Audio_Drivers.c(682): warning: unused parameter 'chipIdAddress' [-Wunused-parameter]
extern uint8_t AUDIO_IO_Read(uint8_t DeviceAddr, uint8_t chipIdAddress) {
                                                         ^
src/audiodrivers/Audio_Drivers.c(691): warning: no previous prototype for function 'setupI2SPeripheral' [-Wmissing-prototypes]
void setupI2SPeripheral(uint32_t audioSamplingFreq){
     ^
src/audiodrivers/Audio_Drivers.c(691): note: declare 'static' if the function is not intended to be used outside of this translation unit
void setupI2SPeripheral(uint32_t audioSamplingFreq){
^
static 
src/audiodrivers/Audio_Drivers.c(746): warning: a function declaration without a prototype is deprecated in all versions of C [-Wstrict-prototypes]
void setupDMAForI2SPeripheral(){
                             ^
                              void
src/audiodrivers/Audio_Drivers.c(756): warning: mixing declarations and code is a C99 extension [-Wdeclaration-after-statement]
        DMA_Stream_TypeDef *audioDMA = DMA1_Stream7;
                            ^
src/audiodrivers/Audio_Drivers.c(746): warning: no previous prototype for function 'setupDMAForI2SPeripheral' [-Wmissing-prototypes]
void setupDMAForI2SPeripheral(){
     ^
src/audiodrivers/Audio_Drivers.c(746): note: declare 'static' if the function is not intended to be used outside of this translation unit
void setupDMAForI2SPeripheral(){
^
static 
src/audiodrivers/Audio_Drivers.c(790): warning: no previous extern declaration for non-static variable 'myI2SFreq' [-Wmissing-variable-declarations]
const uint32_t myI2SFreq[8] = {8000, 11025, 16000, 22050, 32000, 44100, 48000, 96000};
               ^
src/audiodrivers/Audio_Drivers.c(790): note: declare 'static' if the variable is not intended to be used outside of this translation unit
const uint32_t myI2SFreq[8] = {8000, 11025, 16000, 22050, 32000, 44100, 48000, 96000};
      ^
src/audiodrivers/Audio_Drivers.c(791): warning: no previous extern declaration for non-static variable 'myI2SPLLN' [-Wmissing-variable-declarations]
const uint32_t myI2SPLLN[8] = {256, 429, 213, 429, 426, 271, 258, 344};
               ^
src/audiodrivers/Audio_Drivers.c(791): note: declare 'static' if the variable is not intended to be used outside of this translation unit
const uint32_t myI2SPLLN[8] = {256, 429, 213, 429, 426, 271, 258, 344};
      ^
src/audiodrivers/Audio_Drivers.c(792): warning: no previous extern declaration for non-static variable 'myI2SPLLR' [-Wmissing-variable-declarations]
const uint32_t myI2SPLLR[8] = {5, 4, 4, 4, 4, 6, 3, 1};
               ^
src/audiodrivers/Audio_Drivers.c(792): note: declare 'static' if the variable is not intended to be used outside of this translation unit
const uint32_t myI2SPLLR[8] = {5, 4, 4, 4, 4, 6, 3, 1};
      ^
src/audiodrivers/Audio_Drivers.c(796): warning: variable declaration in for loop is a C99-specific feature [-Wc99-extensions]
  for(uint8_t index = 0; index < 8; index++)
      ^
src/audiodrivers/Audio_Drivers.c(796): warning: GCC does not allow variable declarations in for loop initializers before C99 [-Wgcc-compat]
src/audiodrivers/Audio_Drivers.c(806): warning: empty expression statement has no effect; remove unnecessary ';' to silence this warning [-Wextra-semi-stmt]
        while (RCC->CR & RCC_CR_PLLI2SRDY) {};
                                             ^
src/audiodrivers/Audio_Drivers.c(814): warning: empty expression statement has no effect; remove unnecessary ';' to silence this warning [-Wextra-semi-stmt]
        while (!(RCC->CR & RCC_CR_PLLI2SRDY)) {};
                                                ^
src/audiodrivers/Audio_Drivers.c(793): warning: no previous prototype for function 'configureI2SClockPLL' [-Wmissing-prototypes]
void configureI2SClockPLL(uint32_t AudioFreq){ 
     ^
src/audiodrivers/Audio_Drivers.c(793): note: declare 'static' if the function is not intended to be used outside of this translation unit
void configureI2SClockPLL(uint32_t AudioFreq){ 
^
static 
src/audiodrivers/Audio_Drivers.c(847): warning: mixing declarations and code is a C99 extension [-Wdeclaration-after-statement]
        uint32_t temp = checkAudioDAC_ID(DAC_ADDR_ON_I2C);
                 ^
src/audiodrivers/Audio_Drivers.c(865): warning: no previous prototype for function 'setupDMAForAudioDAC' [-Wmissing-prototypes]
void setupDMAForAudioDAC(uint32_t buffStart, uint32_t txTransferSize) {
     ^
src/audiodrivers/Audio_Drivers.c(865): note: declare 'static' if the function is not intended to be used outside of this translation unit
void setupDMAForAudioDAC(uint32_t buffStart, uint32_t txTransferSize) {
^
static 
src/audiodrivers/Audio_Drivers.c(907): warning: implicit conversion loses integer precision: 'uint32_t' (aka 'unsigned int') to 'uint16_t' (aka 'unsigned short') [-Wimplicit-int-conversion]
        cs43l22_Play(audioI2CAddress, (uint16_t *)&PlayBuff[0], PBSIZE);
        ~~~~~~~~~~~~                                            ^~~~~~
src/audiodrivers/Audio_Drivers.c(910): warning: mixing declarations and code is a C99 extension [-Wdeclaration-after-statement]
        uint32_t tmp = (uint32_t)PlayBuff;
                 ^
src/audiodrivers/Audio_Drivers.c(926): warning: a function declaration without a prototype is deprecated in all versions of C [-Wstrict-prototypes]
void DMA1_Stream7_IRQHandler(){
                            ^
                             void
src/audiodrivers/Audio_Drivers.c(926): warning: no previous prototype for function 'DMA1_Stream7_IRQHandler' [-Wmissing-prototypes]
void DMA1_Stream7_IRQHandler(){
     ^
src/audiodrivers/Audio_Drivers.c(926): note: declare 'static' if the function is not intended to be used outside of this translation unit
void DMA1_Stream7_IRQHandler(){
^
static 
src/audiodrivers/Audio_Drivers.c(978): warning: mixing declarations and code is a C99 extension [-Wdeclaration-after-statement]
  uint32_t tmp = (uint32_t)pData;
           ^
62 warnings generated.
compiling Audio_Drivers.c...
src/Initialisation/initialisation_funcs.c(1): warning: non-portable path to file '"stm32f407xx.h"'; specified path differs in case from file name on disk [-Wnonportable-include-path]
#include "STM32F407xx.h"
         ^~~~~~~~~~~~~~~
         "stm32f407xx.h"
src/Initialisation/initialisation_funcs.c(2): warning: In file included from...
src/Initialisation/i2ctests.h(5): warning: a function declaration without a prototype is deprecated in all versions of C [-Wstrict-prototypes]
void PB_I2C_Reset();
                 ^
                  void
src/Initialisation/i2ctests.h(8): warning: a function declaration without a prototype is deprecated in all versions of C [-Wstrict-prototypes]
void greenLED();
             ^
              void
src/Initialisation/i2ctests.h(9): warning: a function declaration without a prototype is deprecated in all versions of C [-Wstrict-prototypes]
void yellowLED();
              ^
               void
src/Initialisation/initialisation_funcs.c(6): warning: // comments are not allowed in this language [-Wcomment]
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
^
src/Initialisation/initialisation_funcs.c(8): warning: a function declaration without a prototype is deprecated in all versions of C [-Wstrict-prototypes]
void setgpioclock(){
                 ^
                  void
src/Initialisation/initialisation_funcs.c(8): warning: no previous prototype for function 'setgpioclock' [-Wmissing-prototypes]
void setgpioclock(){
     ^
src/Initialisation/initialisation_funcs.c(8): note: declare 'static' if the function is not intended to be used outside of this translation unit
void setgpioclock(){
^
static 
src/Initialisation/initialisation_funcs.c(16): warning: a function declaration without a prototype is deprecated in all versions of C [-Wstrict-prototypes]
void initialpins(){
                ^
                 void
src/Initialisation/initialisation_funcs.c(16): warning: no previous prototype for function 'initialpins' [-Wmissing-prototypes]
void initialpins(){
     ^
src/Initialisation/initialisation_funcs.c(16): note: declare 'static' if the function is not intended to be used outside of this translation unit
void initialpins(){
^
static 
src/Initialisation/initialisation_funcs.c(25): warning: a function declaration without a prototype is deprecated in all versions of C [-Wstrict-prototypes]
void timerinit(){
              ^
               void
src/Initialisation/initialisation_funcs.c(25): warning: no previous prototype for function 'timerinit' [-Wmissing-prototypes]
void timerinit(){
     ^
src/Initialisation/initialisation_funcs.c(25): note: declare 'static' if the function is not intended to be used outside of this translation unit
void timerinit(){
^
static 
src/Initialisation/initialisation_funcs.c(48): warning: implicit conversion from 'unsigned int' to 'float' may lose precision [-Wimplicit-int-float-conversion]
  volatile unsigned long x = (unsigned long)(compensation * (36 * delayInMicroSeconds >> 4));
                                                          ~  ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~
src/Initialisation/initialisation_funcs.c(46): warning: no previous prototype for function 'MicroDelay' [-Wmissing-prototypes]
void MicroDelay (unsigned int delayInMicroSeconds) {
     ^
src/Initialisation/initialisation_funcs.c(46): note: declare 'static' if the function is not intended to be used outside of this translation unit
void MicroDelay (unsigned int delayInMicroSeconds) {
^
static 
src/Initialisation/initialisation_funcs.c(54): warning: a function declaration without a prototype is deprecated in all versions of C [-Wstrict-prototypes]
void PB_I2C_Init() {
                ^
                 void
src/Initialisation/initialisation_funcs.c(63): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
  GPIOA->MODER &= ~(3 << 16);  // Clear bits 12 & 13 (PA8)
               ~~ ^~~~~~~~~~
src/Initialisation/initialisation_funcs.c(66): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
  GPIOA->PUPDR &= ~(3 << 16);  // Disable PUs and PDs for PA8
               ~~ ^~~~~~~~~~
src/Initialisation/initialisation_funcs.c(70): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
  GPIOC->MODER &= ~(3 << 18);  // Clear bits 18 & 19 (PC9)
               ~~ ^~~~~~~~~~
src/Initialisation/initialisation_funcs.c(73): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
  GPIOC->PUPDR &= ~(3 << 18);  // Disable PUs and PDs for PC9
               ~~ ^~~~~~~~~~
src/Initialisation/initialisation_funcs.c(88): warning: implicit conversion changes signedness: 'int' to 'unsigned int' [-Wsign-conversion]
  I2C3->CR1    &= ~(1<<15);
               ~~ ^~~~~~~~
src/Initialisation/initialisation_funcs.c(54): warning: no previous prototype for function 'PB_I2C_Init' [-Wmissing-prototypes]
void PB_I2C_Init() {
     ^
src/Initialisation/initialisation_funcs.c(54): note: declare 'static' if the function is not intended to be used outside of this translation unit
void PB_I2C_Init() {
^
static 
20 warnings generated.
compiling initialisation_funcs.c...
assembling startup_stm32f407xx.s...
compiling system_stm32f4xx.c...
linking...
Program Size: Code=25320 RO-data=1264 RW-data=36 ZI-data=11904  
".\Objects\main.axf" - 0 Error(s), 286 Warning(s).

<h2>Software Packages used:</h2>

Package Vendor: ARM
                http://www.keil.com/pack/ARM.CMSIS.5.9.0.pack
                ARM.CMSIS.5.9.0
                CMSIS (Common Microcontroller Software Interface Standard)
   * Component: CORE Version: 5.6.0

Package Vendor: Keil
                https://www.keil.com/pack/Keil.STM32F4xx_DFP.2.17.1.pack
                Keil.STM32F4xx_DFP.2.17.1
                STMicroelectronics STM32F4 Series Device Support, Drivers and Examples
   * Component: Startup Version: 2.6.3

<h2>Collection of Component include folders:</h2>
  ./RTE/_Target_1
  C:/Users/ivanp/AppData/Local/Arm/Packs/ARM/CMSIS/5.9.0/CMSIS/Core/Include
  C:/Users/ivanp/AppData/Local/Arm/Packs/Keil/STM32F4xx_DFP/2.17.1/Drivers/CMSIS/Device/ST/STM32F4xx/Include

<h2>Collection of Component Files used:</h2>

   * Component: ARM::CMSIS:CORE:5.6.0

   * Component: Keil::Device:Startup:2.6.3
      Include file:  Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h
      Source file:   Drivers/CMSIS/Device/ST/STM32F4xx/Source/Templates/arm/startup_stm32f407xx.s
      Source file:   MDK/Device/Source/ARM/STM32F4xx_OTP.s
      Source file:   MDK/Device/Source/ARM/STM32F40xxx_41xxx_OPT.s
      Source file:   Drivers/CMSIS/Device/ST/STM32F4xx/Source/Templates/system_stm32f4xx.c
Build Time Elapsed:  00:00:06
</pre>
</body>
</html>
